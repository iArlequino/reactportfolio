{"ast":null,"code":"\"use client\";\n\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value); // src/InView.tsx\n\n\nimport * as React from \"react\"; // src/observe.ts\n\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = void 0;\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== void 0).map(key => {\n    return `${key}_${key === \"root\" ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    const elements = /* @__PURE__ */new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _a;\n\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold);\n\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n\n        (_a = elements.get(entry.target)) == null ? void 0 : _a.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\nfunction observe(element, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {};\n  }\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  const callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n} // src/InView.tsx\n\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\n\nvar InView = class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    __publicField(this, \"node\", null);\n\n    __publicField(this, \"_unobserveCb\", null);\n\n    __publicField(this, \"handleNode\", node => {\n      if (this.node) {\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: void 0\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    });\n\n    __publicField(this, \"handleChange\", (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(inView, entry);\n      }\n    });\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n\n    if (typeof children === \"function\") {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n    return React.createElement(as || \"div\", {\n      ref: this.handleNode,\n      ...props\n    }, children);\n  }\n\n}; // src/useInView.tsx\n\nimport * as React2 from \"react\";\n\nfunction useInView() {\n  let {\n    threshold,\n    delay,\n    trackVisibility,\n    rootMargin,\n    root,\n    triggerOnce,\n    skip,\n    initialInView,\n    fallbackInView,\n    onChange\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _a;\n\n  const [ref, setRef] = React2.useState(null);\n  const callback = React2.useRef();\n  const [state, setState] = React2.useState({\n    inView: !!initialInView,\n    entry: void 0\n  });\n  callback.current = onChange;\n  React2.useEffect(() => {\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_a = state.entry) == null ? void 0 : _a.target;\n  const previousEntryTarget = React2.useRef();\n\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"sources":["D:\\reactportfolio\\node_modules\\react-intersection-observer\\src\\InView.tsx","D:\\reactportfolio\\node_modules\\react-intersection-observer\\src\\observe.ts","D:\\reactportfolio\\node_modules\\react-intersection-observer\\src\\useInView.tsx"],"names":["React"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}